enum EventVisibility {
    """
    Internal events. Not visible to users. May be shown to administrators.
    """
    INTERNAL
    """
    Only for the user who created the event and users in "visibleToUserIds".
    """
    PRIVATE
    """
    Detail level: visible to all users but only when viewing a specific object, not in the whole list of events.
    """
    DETAIL
    """
    Project detail level: visible to all users
    """
    PUBLIC
}

"""
Represents an event in the system.
"""
interface Event {
    """
    Unique identifier of the event.
    """
    id: UUID!
    """
    Type of the event.
    """
    eventType: EventType!
    """
    Visibility of the event.
    """
    visibility: EventVisibility!
    """
    Id of the user who triggered the event.
    """
    userId: UUID
    """
    List of user ids who can see the event (in addition to the user who triggered the event).
    """
    visibleToUserIds: [UUID!]!
    """
    Id of the project the event belongs to.
    """
    projectId: UUID
    """
    Timestamp of the event.
    """
    timestamp: DateTime!
    """
    Message of the event.
    """
    message: String!
    """
    Timestamp of the most recent child event.
    """
    mostRecentChildTimestamp: DateTime!
    """
    Parent event, if any.
    """
    parent: Event
    """
    Data of the event.
    """
    eventData: [DataField!]!
    """
    List of child events.
    """
    children: [Event!]! @OnDemand
}

"""
Implementation of the Event interface.
Fields are described in the interface definition.
"""
type DefaultEvent implements Event {
    id: UUID!
    eventType: DefaultEventType!
    visibility: EventVisibility!
    userId: UUID
    visibleToUserIds: [UUID!]!
    projectId: UUID
    timestamp: DateTime!
    message: String!
    mostRecentChildTimestamp: DateTime!
    parent: DefaultEvent
    eventData: [DefaultDataField!]!
    children: [DefaultEvent!]! @OnDemand
}

"""
Input for creating an event.
Fields are described in the Event interface.
"""
input CreateEventInput {
    id: UUID
    eventTypeIdentifier: String!
    """
    Visibility of the event. If not provided, the default visibility of the event type is used.
    """
    visibility: EventVisibility
    timestamp: DateTime!
    """
    Message of the event. If not provided, the message template of the event type is used and
    the eventData is used to fill in the template.
    """
    message: String
    userId: UUID
    projectId: UUID
    eventData: [DataFieldInput!]!
    parentId: UUID
    visibleToUserIds: [UUID!] = []
}

"""
Represents a type of event in the system.
"""
interface EventType {
    """
    Unique, human readable identifier of the event type.
    """
    identifier: String!
    """
    Description of the event type.
    """
    description: String
    """
    Default of the event type.
    """
    defaultVisibility: EventVisibility!
    """
    Describes the schema of the event data.
    """
    eventSchema: SchemaDefinition!
    """
    String template for the message of the event.
    """
    messageTemplate: String!
}

"""
Implementation of the EventType interface.
Fields are described in the interface definition.
"""
type DefaultEventType implements EventType {
    identifier: String!
    description: String
    defaultVisibility: EventVisibility!
    eventSchema: DefaultSchemaDefinition!
    messageTemplate: String!
}

"""
Represents a field in the data of an event.
"""
interface DataField {
    """
    Name of the field.
    """
    key: String!
    """
    Type of the field.
    """
    type: AllowedDataType!
    """
    Value of the field, as a string.
    """
    value: String
}

"""
Default implementation of the DataField interface.
"""
type DefaultDataField implements DataField {
    key: String!
    type: AllowedDataType!
    value: String
}

"""
Input for creating a data field.
"""
input DataFieldInput {
    key: String!
    type: AllowedDataType!
    value: String
}

"""
Definition of the schema of the event data.
"""
interface SchemaDefinition {
    """
    List of fields in the schema.
    """
    fields: [FieldSchemaDefinition!]!
}

"""
Default implementation of the SchemaDefinition interface.
"""
type DefaultSchemaDefinition implements SchemaDefinition {
    fields: [DefaultFieldSchemaDefinition!]!
}

"""
Schema definition for a field in the event data.
"""
interface FieldSchemaDefinition {
    """
    Name of the field.
    """
    name: String!
    """
    Type of the field.
    """
    type: AllowedDataType!
    """
    Description of the field.
    """
    description: String
    """
    Whether the field is required.
    """
    required: Boolean!
    """
    Allowed values for the field. Set to null if any value is allowed.
    """
    allowedValues: [String!]
}

"""
Default implementation of the FieldSchemaDefinition interface.
"""
type DefaultFieldSchemaDefinition implements FieldSchemaDefinition {
    name: String!
    type: AllowedDataType!
    description: String
    required: Boolean!
    allowedValues: [String!]
}

"""
Input for creating an event type.
"""
input CreateEventTypeInput {
    identifier: String!
    description: String
    defaultVisibility: EventVisibility!
    eventSchema: SchemaDefinitionInput!
    messageTemplate: String!
}

"""
Input for updating an event type.
"""
input UpdateEventTypeInput {
    description: String
    defaultVisibility: EventVisibility!
    eventSchema: SchemaDefinitionInput!
    messageTemplate: String!
}

"""
Input for creating and updating a schema definition.
"""
input SchemaDefinitionInput {
    fields: [FieldSchemaDefinitionInput!]!
}

"""
Input for creating and updating a field schema definition.
"""
input FieldSchemaDefinitionInput {
    name: String!
    type: AllowedDataType!
    description: String
    required: Boolean! = true
    allowedValues: [String!]
}

enum AllowedDataType {
    STRING
    INTEGER
    DOUBLE
    BOOLEAN
}

